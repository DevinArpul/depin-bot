{
  "manifest": {
    "name": "tldts",
    "version": "6.1.86",
    "description": "Library to work against complex domain names, subdomains and URIs.",
    "author": {
      "name": "Rémi Berson"
    },
    "contributors": [
      {
        "name": "Alexei",
        "email": "alexeiatyahoodotcom@gmail.com"
      },
      {
        "name": "Alexey",
        "email": "kureev-mail@ya.ru"
      },
      {
        "name": "Andrew",
        "email": "chefandrew@seomoz.org"
      },
      {
        "name": "Johannes Ewald",
        "email": "johannes.ewald@peerigon.com"
      },
      {
        "name": "Jérôme Desboeufs",
        "email": "jerome.desboeufs@gmail.com"
      },
      {
        "name": "Kelly Campbell",
        "email": "kelly.a.campbell@gmail.com"
      },
      {
        "name": "Kiko Beats",
        "email": "josefrancisco.verdu@gmail.com"
      },
      {
        "name": "Kris Reeves",
        "email": "krisreeves@searchfanatics.com"
      },
      {
        "name": "Krzysztof Jan Modras",
        "email": "chrmod@chrmod.net"
      },
      {
        "name": "Olivier Melcher",
        "email": "olivier.melcher@gmail.com"
      },
      {
        "name": "Rémi Berson",
        "email": "remi.berson@pm.me"
      },
      {
        "name": "Saad Rashid",
        "email": "srashid@lendinghome.com"
      },
      {
        "name": "Thomas Parisot",
        "email": "hi@oncletom.io"
      },
      {
        "name": "Timo Tijhof",
        "email": "krinklemail@gmail.com"
      },
      {
        "name": "Xavier Damman",
        "email": "xdamman@gmail.com"
      },
      {
        "name": "Yehezkiel Syamsuhadi",
        "email": "yehezkielbs@gmail.com"
      }
    ],
    "publishConfig": {
      "access": "public"
    },
    "license": "MIT",
    "homepage": "https://github.com/remusao/tldts#readme",
    "bugs": {
      "url": "https://github.com/remusao/tldts/issues"
    },
    "repository": {
      "type": "git",
      "url": "git+ssh://git@github.com/remusao/tldts.git"
    },
    "main": "dist/cjs/index.js",
    "module": "dist/es6/index.js",
    "types": "dist/types/index.d.ts",
    "files": [
      "dist",
      "src",
      "index.ts"
    ],
    "bin": {
      "tldts": "bin/cli.js"
    },
    "scripts": {
      "clean": "rimraf dist coverage",
      "build": "tsc --build ./tsconfig.json",
      "bundle": "tsc --build ./tsconfig.bundle.json && rollup --config ./rollup.config.mjs",
      "prepack": "yarn run bundle",
      "test": "nyc mocha --config ../../.mocharc.cjs"
    },
    "devDependencies": {
      "@rollup/plugin-node-resolve": "^16.0.0",
      "@rollup/plugin-terser": "^0.4.0",
      "@rollup/plugin-typescript": "^12.1.0",
      "@types/chai": "^4.2.18",
      "@types/mocha": "^10.0.0",
      "@types/node": "^22.0.0",
      "chai": "^4.4.1",
      "mocha": "^11.0.1",
      "nyc": "^17.0.0",
      "rimraf": "^5.0.1",
      "rollup": "^4.1.0",
      "rollup-plugin-sourcemaps": "^0.6.1",
      "tldts-tests": "^6.1.86",
      "typescript": "^5.0.4"
    },
    "dependencies": {
      "tldts-core": "^6.1.86"
    },
    "keywords": [
      "tld",
      "sld",
      "domain",
      "subdomain",
      "subdomain",
      "hostname",
      "browser",
      "uri",
      "url",
      "domain name",
      "public suffix",
      "url parsing",
      "typescript"
    ],
    "gitHead": "94251baa0e4ee46df6fd06fcd3749fcdf9b14ebc",
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-tldts-6.1.86-087e0555b31b9725ee48ca7e77edc56115cd82f7-integrity/node_modules/tldts/package.json",
    "readmeFilename": "README.md",
    "readme": "# tldts - Blazing Fast URL Parsing\n\n`tldts` is a JavaScript library to extract hostnames, domains, public suffixes, top-level domains and subdomains from URLs.\n\n**Features**:\n\n1. Tuned for **performance** (order of 0.1 to 1 μs per input)\n2. Handles both URLs and hostnames\n3. Full Unicode/IDNA support\n4. Support parsing email addresses\n5. Detect IPv4 and IPv6 addresses\n6. Continuously updated version of the public suffix list\n7. **TypeScript**, ships with `umd`, `esm`, `cjs` bundles and _type definitions_\n8. Small bundles and small memory footprint\n9. Battle tested: full test coverage and production use\n\n# Install\n\n```bash\nnpm install --save tldts\n```\n\n# Usage\n\nUsing the command-line interface:\n\n```js\n$ npx tldts 'http://www.writethedocs.org/conf/eu/2017/'\n{\n  \"domain\": \"writethedocs.org\",\n  \"domainWithoutSuffix\": \"writethedocs\",\n  \"hostname\": \"www.writethedocs.org\",\n  \"isIcann\": true,\n  \"isIp\": false,\n  \"isPrivate\": false,\n  \"publicSuffix\": \"org\",\n  \"subdomain\": \"www\"\n}\n```\n\nProgrammatically:\n\n```js\nconst { parse } = require('tldts');\n\n// Retrieving hostname related informations of a given URL\nparse('http://www.writethedocs.org/conf/eu/2017/');\n// { domain: 'writethedocs.org',\n//   domainWithoutSuffix: 'writethedocs',\n//   hostname: 'www.writethedocs.org',\n//   isIcann: true,\n//   isIp: false,\n//   isPrivate: false,\n//   publicSuffix: 'org',\n//   subdomain: 'www' }\n```\n\nModern _ES6 modules import_ is also supported:\n\n```js\nimport { parse } from 'tldts';\n```\n\nAlternatively, you can try it _directly in your browser_ here: https://npm.runkit.com/tldts\n\n# API\n\n- `tldts.parse(url | hostname, options)`\n- `tldts.getHostname(url | hostname, options)`\n- `tldts.getDomain(url | hostname, options)`\n- `tldts.getPublicSuffix(url | hostname, options)`\n- `tldts.getSubdomain(url, | hostname, options)`\n- `tldts.getDomainWithoutSuffix(url | hostname, options)`\n\nThe behavior of `tldts` can be customized using an `options` argument for all\nthe functions exposed as part of the public API. This is useful to both change\nthe behavior of the library as well as fine-tune the performance depending on\nyour inputs.\n\n```js\n{\n  // Use suffixes from ICANN section (default: true)\n  allowIcannDomains: boolean;\n  // Use suffixes from Private section (default: false)\n  allowPrivateDomains: boolean;\n  // Extract and validate hostname (default: true)\n  // When set to `false`, inputs will be considered valid hostnames.\n  extractHostname: boolean;\n  // Validate hostnames after parsing (default: true)\n  // If a hostname is not valid, not further processing is performed. When set\n  // to `false`, inputs to the library will be considered valid and parsing will\n  // proceed regardless.\n  validateHostname: boolean;\n  // Perform IP address detection (default: true).\n  detectIp: boolean;\n  // Assume that both URLs and hostnames can be given as input (default: true)\n  // If set to `false` we assume only URLs will be given as input, which\n  // speed-ups processing.\n  mixedInputs: boolean;\n  // Specifies extra valid suffixes (default: null)\n  validHosts: string[] | null;\n}\n```\n\nThe `parse` method returns handy **properties about a URL or a hostname**.\n\n```js\nconst tldts = require('tldts');\n\ntldts.parse('https://spark-public.s3.amazonaws.com/dataanalysis/loansData.csv');\n// { domain: 'amazonaws.com',\n//   domainWithoutSuffix: 'amazonaws',\n//   hostname: 'spark-public.s3.amazonaws.com',\n//   isIcann: true,\n//   isIp: false,\n//   isPrivate: false,\n//   publicSuffix: 'com',\n//   subdomain: 'spark-public.s3' }\n\ntldts.parse(\n  'https://spark-public.s3.amazonaws.com/dataanalysis/loansData.csv',\n  { allowPrivateDomains: true },\n);\n// { domain: 'spark-public.s3.amazonaws.com',\n//   domainWithoutSuffix: 'spark-public',\n//   hostname: 'spark-public.s3.amazonaws.com',\n//   isIcann: false,\n//   isIp: false,\n//   isPrivate: true,\n//   publicSuffix: 's3.amazonaws.com',\n//   subdomain: '' }\n\ntldts.parse('gopher://domain.unknown/');\n// { domain: 'domain.unknown',\n//   domainWithoutSuffix: 'domain',\n//   hostname: 'domain.unknown',\n//   isIcann: false,\n//   isIp: false,\n//   isPrivate: true,\n//   publicSuffix: 'unknown',\n//   subdomain: '' }\n\ntldts.parse('https://192.168.0.0'); // IPv4\n// { domain: null,\n//   domainWithoutSuffix: null,\n//   hostname: '192.168.0.0',\n//   isIcann: null,\n//   isIp: true,\n//   isPrivate: null,\n//   publicSuffix: null,\n//   subdomain: null }\n\ntldts.parse('https://[::1]'); // IPv6\n// { domain: null,\n//   domainWithoutSuffix: null,\n//   hostname: '::1',\n//   isIcann: null,\n//   isIp: true,\n//   isPrivate: null,\n//   publicSuffix: null,\n//   subdomain: null }\n\ntldts.parse('tldts@emailprovider.co.uk'); // email\n// { domain: 'emailprovider.co.uk',\n//   domainWithoutSuffix: 'emailprovider',\n//   hostname: 'emailprovider.co.uk',\n//   isIcann: true,\n//   isIp: false,\n//   isPrivate: false,\n//   publicSuffix: 'co.uk',\n//   subdomain: '' }\n```\n\n| Property Name         | Type   | Description                                     |\n| :-------------------- | :----- | :---------------------------------------------- |\n| `hostname`            | `str`  | `hostname` of the input extracted automatically |\n| `domain`              | `str`  | Domain (tld + sld)                              |\n| `domainWithoutSuffix` | `str`  | Domain without public suffix                    |\n| `subdomain`           | `str`  | Sub domain (what comes after `domain`)          |\n| `publicSuffix`        | `str`  | Public Suffix (tld) of `hostname`               |\n| `isIcann`             | `bool` | Does TLD come from ICANN part of the list       |\n| `isPrivate`           | `bool` | Does TLD come from Private part of the list     |\n| `isIP`                | `bool` | Is `hostname` an IP address?                    |\n\n## Single purpose methods\n\nThese methods are shorthands if you want to retrieve only a single value (and\nwill perform better than `parse` because less work will be needed).\n\n### getHostname(url | hostname, options?)\n\nReturns the hostname from a given string.\n\n```javascript\nconst { getHostname } = require('tldts');\n\ngetHostname('google.com'); // returns `google.com`\ngetHostname('fr.google.com'); // returns `fr.google.com`\ngetHostname('fr.google.google'); // returns `fr.google.google`\ngetHostname('foo.google.co.uk'); // returns `foo.google.co.uk`\ngetHostname('t.co'); // returns `t.co`\ngetHostname('fr.t.co'); // returns `fr.t.co`\ngetHostname(\n  'https://user:password@example.co.uk:8080/some/path?and&query#hash',\n); // returns `example.co.uk`\n```\n\n### getDomain(url | hostname, options?)\n\nReturns the fully qualified domain from a given string.\n\n```javascript\nconst { getDomain } = require('tldts');\n\ngetDomain('google.com'); // returns `google.com`\ngetDomain('fr.google.com'); // returns `google.com`\ngetDomain('fr.google.google'); // returns `google.google`\ngetDomain('foo.google.co.uk'); // returns `google.co.uk`\ngetDomain('t.co'); // returns `t.co`\ngetDomain('fr.t.co'); // returns `t.co`\ngetDomain('https://user:password@example.co.uk:8080/some/path?and&query#hash'); // returns `example.co.uk`\n```\n\n### getDomainWithoutSuffix(url | hostname, options?)\n\nReturns the domain (as returned by `getDomain(...)`) without the public suffix part.\n\n```javascript\nconst { getDomainWithoutSuffix } = require('tldts');\n\ngetDomainWithoutSuffix('google.com'); // returns `google`\ngetDomainWithoutSuffix('fr.google.com'); // returns `google`\ngetDomainWithoutSuffix('fr.google.google'); // returns `google`\ngetDomainWithoutSuffix('foo.google.co.uk'); // returns `google`\ngetDomainWithoutSuffix('t.co'); // returns `t`\ngetDomainWithoutSuffix('fr.t.co'); // returns `t`\ngetDomainWithoutSuffix(\n  'https://user:password@example.co.uk:8080/some/path?and&query#hash',\n); // returns `example`\n```\n\n### getSubdomain(url | hostname, options?)\n\nReturns the complete subdomain for a given string.\n\n```javascript\nconst { getSubdomain } = require('tldts');\n\ngetSubdomain('google.com'); // returns ``\ngetSubdomain('fr.google.com'); // returns `fr`\ngetSubdomain('google.co.uk'); // returns ``\ngetSubdomain('foo.google.co.uk'); // returns `foo`\ngetSubdomain('moar.foo.google.co.uk'); // returns `moar.foo`\ngetSubdomain('t.co'); // returns ``\ngetSubdomain('fr.t.co'); // returns `fr`\ngetSubdomain(\n  'https://user:password@secure.example.co.uk:443/some/path?and&query#hash',\n); // returns `secure`\n```\n\n### getPublicSuffix(url | hostname, options?)\n\nReturns the [public suffix][] for a given string.\n\n```javascript\nconst { getPublicSuffix } = require('tldts');\n\ngetPublicSuffix('google.com'); // returns `com`\ngetPublicSuffix('fr.google.com'); // returns `com`\ngetPublicSuffix('google.co.uk'); // returns `co.uk`\ngetPublicSuffix('s3.amazonaws.com'); // returns `com`\ngetPublicSuffix('s3.amazonaws.com', { allowPrivateDomains: true }); // returns `s3.amazonaws.com`\ngetPublicSuffix('tld.is.unknown'); // returns `unknown`\n```\n\n# Troubleshooting\n\n## Retrieving subdomain of `localhost` and custom hostnames\n\n`tldts` methods `getDomain` and `getSubdomain` are designed to **work only with _known and valid_ TLDs**.\nThis way, you can trust what a domain is.\n\n`localhost` is a valid hostname but not a TLD. You can pass additional options to each method exposed by `tldts`:\n\n```js\nconst tldts = require('tldts');\n\ntldts.getDomain('localhost'); // returns null\ntldts.getSubdomain('vhost.localhost'); // returns null\n\ntldts.getDomain('localhost', { validHosts: ['localhost'] }); // returns 'localhost'\ntldts.getSubdomain('vhost.localhost', { validHosts: ['localhost'] }); // returns 'vhost'\n```\n\n## Updating the TLDs List\n\n`tldts` made the opinionated choice of shipping with a list of suffixes directly\nin its bundle. There is currently no mechanism to update the lists yourself, but\nwe make sure that the version shipped is always up-to-date.\n\nIf you keep `tldts` updated, the lists should be up-to-date as well!\n\n# Performance\n\n`tldts` is the _fastest JavaScript library_ available for parsing hostnames. It is able to parse _millions of inputs per second_ (typically 2-3M depending on your hardware and inputs). It also offers granular options to fine-tune the behavior and performance of the library depending on the kind of inputs you are dealing with (e.g.: if you know you only manipulate valid hostnames you can disable the hostname extraction step with `{ extractHostname: false }`).\n\nPlease see [this detailed comparison](./comparison/comparison.md) with other available libraries.\n\n## Contributors\n\n`tldts` is based upon the excellent `tld.js` library and would not exist without\nthe many contributors who worked on the project:\n<a href=\"graphs/contributors\"><img src=\"https://opencollective.com/tldjs/contributors.svg?width=890\" /></a>\n\nThis project would not be possible without the amazing Mozilla's\n[public suffix list][]. Thank you for your hard work!\n\n# License\n\n[MIT License](LICENSE).\n\n[badge-ci]: https://secure.travis-ci.org/remusao/tldts.svg?branch=master\n[badge-downloads]: https://img.shields.io/npm/dm/tldts.svg\n[public suffix list]: https://publicsuffix.org/list/\n[list the recent changes]: https://github.com/publicsuffix/list/commits/master\n[changes Atom Feed]: https://github.com/publicsuffix/list/commits/master.atom\n[public suffix]: https://publicsuffix.org/learn/\n",
    "licenseText": "Copyright (c) 2017 Thomas Parisot, 2018 Rémi Berson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and\nassociated documentation files (the \"Software\"), to deal in the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/tldts/-/tldts-6.1.86.tgz#087e0555b31b9725ee48ca7e77edc56115cd82f7",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/tldts/-/tldts-6.1.86.tgz",
    "hash": "087e0555b31b9725ee48ca7e77edc56115cd82f7",
    "integrity": "sha512-WMi/OQ2axVTf/ykqCQgXiIct+mSQDFdH2fkwhPwgEwvJ1kSzZRiinb0zF2Xb8u4+OqPChmyI6MEu4EezNJz+FQ==",
    "registry": "npm",
    "packageName": "tldts",
    "cacheIntegrity": "sha512-WMi/OQ2axVTf/ykqCQgXiIct+mSQDFdH2fkwhPwgEwvJ1kSzZRiinb0zF2Xb8u4+OqPChmyI6MEu4EezNJz+FQ== sha1-CH4FVbMblyXuSMp+d+3FYRXNgvc="
  },
  "registry": "npm",
  "hash": "087e0555b31b9725ee48ca7e77edc56115cd82f7"
}