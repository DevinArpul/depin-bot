{
  "manifest": {
    "name": "unraw",
    "version": "2.0.1",
    "description": "Convert raw escape sequences to their respective characters (undo String.raw).",
    "main": "dist/index.js",
    "unpkg": "dist/index.min.js",
    "types": "dist/index.d.ts",
    "repository": {
      "type": "git",
      "url": "https://github.com/iansan5653/unraw"
    },
    "scripts": {
      "build": "tsc",
      "minify": "node-minify --compressor uglify-es --input dist/index.js --output dist/index.min.js & node-minify --compressor uglify-es --input dist/errors.js --output dist/errors.min.js",
      "test": "ts-mocha src/**/*.test.ts",
      "testWithCoverage": "npm run build && nyc --reporter=text mocha src/**/*.test.ts --require ts-node/register --require source-map-support/register",
      "testForCheck": "nyc --reporter=text-summary mocha src/index.test.ts --reporter=progress",
      "testForCI": "nyc --reporter=cobertura --reporter=html mocha src/index.test.ts --reporter=mocha-junit-reporter --reporter-options mochaFile=test-results.xml",
      "lint": "eslint src/**/*.ts",
      "check": "npm run build && npm run testForCheck && npm run lint",
      "ensureCleanTree": "echo 'Checking to ensure all changes are committed...' && git diff --quiet --exit-code & git diff --quiet --cached --exit-code",
      "prepublishOnly": "npm run ensureCleanTree && npm run check && npm run minify",
      "postpublish": "cross-var git tag -a $npm_package_version -m \"See changelog.md for release notes.\" && git push --tags && cross-var git tag -d $npm_package_version",
      "format": "prettier src/**/*.test.ts --write"
    },
    "author": {
      "name": "Ian Sanders",
      "url": "https://github.com/iansan5653"
    },
    "license": "MIT",
    "devDependencies": {
      "@node-minify/core": "^5.3.0",
      "@node-minify/cli": "^5.3.0",
      "@node-minify/uglify-es": "^5.3.0",
      "@types/mocha": "^7.0.2",
      "@types/node": "^13.9.5",
      "@typescript-eslint/eslint-plugin": "^2.25.0",
      "@typescript-eslint/parser": "^2.25.0",
      "cross-var": "^1.1.0",
      "eslint": "^6.8.0",
      "eslint-config-google": "^0.14.0",
      "eslint-plugin-jsdoc": "^22.1.0",
      "eslint-plugin-mocha": "^6.3.0",
      "mocha": "^7.1.1",
      "mocha-junit-reporter": "^1.23.3",
      "nyc": "^15.0.0",
      "prettier": "^2.0.2",
      "source-map-support": "^0.5.16",
      "ts-mocha": "^7.0.0",
      "typescript": "^3.8.3"
    },
    "dependencies": {},
    "nyc": {
      "include": [
        "src/**/*.ts",
        "src/**/*.tsx"
      ],
      "extension": [
        ".ts",
        ".tsx"
      ],
      "require": [
        "ts-node/register"
      ],
      "sourceMap": true,
      "instrument": true
    },
    "files": [
      "dist/index.d.ts",
      "dist/index.d.ts.map",
      "dist/index.js",
      "dist/index.js.map",
      "dist/index.min.js",
      "dist/errors.d.ts",
      "dist/errors.d.ts.map",
      "dist/errors.js",
      "dist/errors.js.map",
      "dist/errors.min.js"
    ],
    "keywords": [
      "strings",
      "escapes",
      "raw strings",
      "cooked strings",
      "template literal",
      "unescape",
      "unicode",
      "decode"
    ],
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-unraw-2.0.1-7b51dcdfb1e43d59d5e52cdb44d349d029edbaba-integrity/node_modules/unraw/package.json",
    "readmeFilename": "readme.md",
    "readme": "# `unraw`\n\n[![Build Status](https://dev.azure.com/iansan5653/unraw/_apis/build/status/iansan5653.unraw?branchName=master)](https://dev.azure.com/iansan5653/unraw/_build/latest?definitionId=3&branchName=master)\n[![Azure DevOps tests](https://img.shields.io/azure-devops/tests/iansan5653/unraw/3?compact_message)](https://dev.azure.com/iansan5653/unraw/_build/latest?definitionId=3&branchName=master)\n[![Azure DevOps coverage](https://img.shields.io/azure-devops/coverage/iansan5653/unraw/3)](https://dev.azure.com/iansan5653/unraw/_build/latest?definitionId=3&branchName=master)\n[![npm](https://img.shields.io/npm/v/unraw)](https://www.npmjs.com/package/unraw)\n[![David](https://david-dm.org/iansan5653/unraw.svg)](https://david-dm.org/iansan5653/unraw)\n[![David](https://david-dm.org/iansan5653/unraw/dev-status.svg)](https://david-dm.org/iansan5653/unraw?type=dev)\n\n\n```ts\nunraw(\"\\\\'\\\\t\\\\u{1f601}\\\\'\"); // -> \"'\tüòÅ'\"\n```\n\n`unraw` is a small module that converts raw strings to parsed strings in the same\nmanner as the standard JavaScript escaping engine. In essence, it is the exact\nopposite of\n[`String.raw`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw).\n\n## Use Case\n\nMost of the time, you probably don't need this library unless you're working\ndirectly with raw strings and you need a way to get them back to normal strings.\nMaybe the most signicant use case is when building\n[template literal tags](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates);\nyou can use the `.raw` property of the passed string array to access the raw\nstrings, but then you may want to still return normal strings after processing.\n\nThe module is also useful for parsing text files written with escape sequences,\nalthough keep in mind that the JavaScript flavor of escape sequences may differ\nfrom the flavor used in an input file.\n\n## Getting Started\n\n`unraw` is a UMD module, so it can be used in Node or on the web. Typings are\nincluded for TypeScript as well.\n\n### Usage in Node.JS\n\n`unraw` is hosted on [npm](https://www.npmjs.com/unraw), so you can install\nwith:\n\n```bash\nnpm i unraw\n```\n\nTo use in code:\n\n```js\nimport unraw from \"unraw\";\n\nunraw(\"\\\\n\");\n```\n\nIf you want to access error messages:\n\n```js\nimport {unraw, errorMessages, ErrorType} from \"unraw\";\n\nunraw(\"\\\\n\");\nerrorMessages.get(ErrorType.MalformedUnicode);\n```\n\n### Usage in the Browser\n\nYou can embed it (minified) on a webpage with\n[RequireJS](https://requirejs.org/). The module is available on\n[UNPKG](https://unpkg.com) at https://unpkg.com/unraw:\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\"></script>\n<script>\n  require([\"https://unpkg.com/unraw^1.2.3/dist/index.min.js\"], function(unraw) {\n    unraw.unraw(\"\\\\n\");\n    unraw.errorMessages.get(unraw.ErrorType.MalformedUnicode);\n  });\n</script>\n```\n\n_Note_: Importing via the 'bare' url (`https://unpkg.com/unraw`) is not\nsupported as it breaks references to other required files.\n\n## Usage\n\nUsage is simple - the library exports a default function, `unraw`. The first\nargument to `unraw` is the string to parse, and the second is an optional flag\nto allow or disallow octal escapes, which are deprecated (defaults to\n`false`, so the default behavior is to throw an error when octal sequences\nare encountered).\n\n```js\nunraw(\"\\\\t\\\\tThis is indented.\");\n// => \"\t\tThis is indented.\"\n```\n\nThe library attempts to mimic the behaviour of standard JavaScript strings as\nclosely as possible. This means that invalid escape sequences will throw\n`SyntaxError`s and that every escape sequence that is valid in a normal string\nshould be valid when passed to `unraw`.\n\nIn some ways this is similar to the behavior of `JSON.parse`.\n\nYou can always expect the outcome of calling `unraw` on a raw string to be\nexactly the same as if that string were not raw in the first place:\n\n```js\n`Invalid: \\u23`                   // Throws a SyntaxError\nunraw(String.raw`Invalid: \\u23`)  // Throws a SyntaxError\n\n`Valid: \\u0041`                   // => `Valid: A`\nunraw(String.raw`Valid: \\u0041`)  // => `Valid: A`\n\n`Valid: \\A`                       // => `Valid: A`\nunraw(String.raw`Valid: \\A`)      // => `Valid: A`\n\n`Valid: \\\\`                       // => `Valid: \\`\nunraw(String.raw`Valid: \\\\`)      // => `Valid: \\`\n\n`Valid: \\x42`                     // => `Valid: B`\nunraw(String.raw`Valid: \\x42`)    // => `Valid: B`\n\n`Octal: \\102`                      // => Throws a SyntaxError\nunraw(String.raw`Octal: \\102`)     // => Throws a SyntaxError\nunraw(String.raw`Octal: \\102`, true) // => Octal: B\n```\n\n### Errors\n\nIf desired, you can access the possible error messages to help identify errors:\n\n```ts\nimport {unraw, ErrorType, errorMessages} from \"unraw\";\n\ntry {\n  unraw(\"\\\\u25\");\n} catch (err) {\n  if (err.message === errorMessages.get(ErrorType.MalformedUnicode)) {\n    console.error(\"String had an invalid Unicode escape sequence.\");\n  }\n}\n```\n\nThe full list of error message names available through the `ErrorType` enum\n(exposed as a normal object in JavaScript).\n\n## Contributing\n\nFound a bug? Please,\n[submit it here.](https://github.com/iansan5653/unraw/issues)\n\nPull requests are always welcome, although to increase your chances of your\ncontribution being accepted, opening an issue and linking to it is always a\ngood idea.\n\nPull requests will not be merged unless the Azure Pipelines build succeeds.\nThis means that all checks must pass and code must be free of lint errors. To\nquickly confirm that it will, just run:\n\n```bash\nnpm run check\n```\n\nThis checks your formatting, tests, and for TypeScript compiler errors. If the\ntask doesn't fail, you should be good to go.\n\n### Other Tasks\n\nFor your convenience, some other tasks are also provided in the `package.json`:\n\n- `npm run build` - Compiles TypeScript code to JavaScript\n- `npm run minify` - Generate minified JavaScript files from compiled files\n- `npm run test` - Quickly run tests using TypeScript code without compiling\n- `npm run testWithCoverage` - Run tests and generate coverage report\n- `npm run lint` - Check code for linting errors\n- `npm run check` - Check to ensure code will pass Pipelines checks (see above)\n- `npm run format` - Format code using Prettier\n",
    "licenseText": "MIT License\n\nCopyright (c) 2019 Ian Sanders\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/unraw/-/unraw-2.0.1.tgz#7b51dcdfb1e43d59d5e52cdb44d349d029edbaba",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/unraw/-/unraw-2.0.1.tgz",
    "hash": "7b51dcdfb1e43d59d5e52cdb44d349d029edbaba",
    "integrity": "sha512-tdOvLfRzHolwYcHS6HIX860MkK9LQ4+oLuNwFYL7bpgTEO64PZrcQxkisgwJYCfF8sKiWLwwu1c83DvMkbefIQ==",
    "registry": "npm",
    "packageName": "unraw",
    "cacheIntegrity": "sha512-tdOvLfRzHolwYcHS6HIX860MkK9LQ4+oLuNwFYL7bpgTEO64PZrcQxkisgwJYCfF8sKiWLwwu1c83DvMkbefIQ== sha1-e1Hc37HkPVnV5SzbRNNJ0Cnturo="
  },
  "registry": "npm",
  "hash": "7b51dcdfb1e43d59d5e52cdb44d349d029edbaba"
}