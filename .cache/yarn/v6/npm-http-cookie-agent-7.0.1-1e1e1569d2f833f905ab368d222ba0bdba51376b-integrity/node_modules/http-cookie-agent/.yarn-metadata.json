{
  "manifest": {
    "name": "http-cookie-agent",
    "version": "7.0.1",
    "description": "Allows cookies with every Node.js HTTP clients.",
    "keywords": [
      "agent",
      "axios",
      "cookies",
      "fetch",
      "got",
      "http",
      "https",
      "needle",
      "node-fetch",
      "phin",
      "request",
      "superagent",
      "tough-cookie",
      "urllib",
      "undici"
    ],
    "homepage": "https://github.com/3846masa/http-cookie-agent#readme",
    "bugs": {
      "url": "https://github.com/3846masa/http-cookie-agent/issues"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/3846masa/http-cookie-agent.git"
    },
    "funding": "https://github.com/sponsors/3846masa",
    "license": "MIT",
    "author": {
      "name": "3846masa",
      "email": "3846masahiro+git@gmail.com"
    },
    "exports": {
      "./http": "./http/index.js",
      "./undici": "./undici/index.js",
      "./undici/v6": "./undici/v6/index.js"
    },
    "files": [
      "dist",
      "undici",
      "http",
      "!**/__tests__"
    ],
    "scripts": {
      "prebuild": "rimraf dist",
      "build": "pnpm run --parallel \"/^build:.*/\"",
      "build:cjs": "babel src --out-dir dist --extensions .ts --out-file-extension .js",
      "build:mjs": "babel src --out-dir dist --extensions .mts --out-file-extension .mjs",
      "format": "pnpm run --sequential \"/^format:.*/\"",
      "format:eslint": "eslint --fix .",
      "format:prettier": "prettier --write .",
      "lint": "pnpm run \"/^lint:.*/\"",
      "lint:dts": "tsc --noEmit http/*.d.ts undici/*.d.ts",
      "lint:eslint": "eslint --max-warnings 0 .",
      "lint:prettier": "prettier --check .",
      "lint:tsc": "tsc --noEmit",
      "semantic-release": "semantic-release",
      "test": "NODE_OPTIONS=\"--experimental-vm-modules\" jest"
    },
    "dependencies": {
      "agent-base": "^7.1.3"
    },
    "devDependencies": {
      "@3846masa/configs": "github:3846masa/configs#e259de36675e7ccd48a0285d325cb9be710f4370",
      "@babel/cli": "7.27.0",
      "@babel/core": "7.26.10",
      "@babel/plugin-proposal-explicit-resource-management": "7.25.9",
      "@babel/preset-env": "7.26.9",
      "@babel/preset-typescript": "7.27.0",
      "@hapi/wreck": "18.1.0",
      "@jest/globals": "29.7.0",
      "@semantic-release/changelog": "6.0.3",
      "@semantic-release/git": "10.0.1",
      "@types/babel__core": "7.20.5",
      "@types/needle": "3.3.0",
      "@types/node": "20.17.30",
      "@types/request": "2.48.12",
      "@types/semver": "7.7.0",
      "@types/superagent": "8.1.9",
      "agentkeepalive": "4.6.0",
      "axios": "1.8.4",
      "babel-jest": "29.7.0",
      "disposablestack": "1.1.7",
      "got": "14.4.7",
      "http-proxy-agent": "7.0.2",
      "jest": "29.7.0",
      "needle": "3.3.1",
      "node-fetch": "3.3.2",
      "phin": "3.7.1",
      "proxy": "2.2.0",
      "request": "2.88.2",
      "rimraf": "6.0.1",
      "semantic-release": "24.2.3",
      "semver": "7.7.1",
      "superagent": "10.2.0",
      "tough-cookie": "5.1.2",
      "typescript": "5.8.3",
      "undici": "7.8.0",
      "undici__v6": "npm:undici@6.21.2",
      "urllib": "4.6.11"
    },
    "peerDependencies": {
      "tough-cookie": "^4.0.0 || ^5.0.0",
      "undici": "^7.0.0"
    },
    "peerDependenciesMeta": {
      "undici": {
        "optional": true
      }
    },
    "packageManager": "pnpm@10.8.0",
    "engines": {
      "node": ">=20.0.0"
    },
    "pnpm": {
      "overrides": {
        "urllib>undici": "$undici"
      },
      "patchedDependencies": {
        "@semantic-release/git@10.0.1": "patches/@semantic-release__git@10.0.1.patch"
      }
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-http-cookie-agent-7.0.1-1e1e1569d2f833f905ab368d222ba0bdba51376b-integrity/node_modules/http-cookie-agent/package.json",
    "readmeFilename": "README.md",
    "readme": "# HTTP Cookie Agent\n\n![HTTP Cookie Agent](./docs/assets/ogp.jpg)\n\n[![github sponsors](https://flat.badgen.net/badge/GitHub%20Sponsors/Support%20me%20%E2%9D%A4/ff69b4?icon=github)](https://github.com/sponsors/3846masa)\n[![npm](https://flat.badgen.net/npm/v/http-cookie-agent)](https://www.npmjs.com/package/http-cookie-agent)\n[![license](https://flat.badgen.net/badge/license/MIT/blue)](LICENSE)\n[![standard-readme compliant](https://flat.badgen.net/badge/readme%20style/standard/green)](https://github.com/RichardLitt/standard-readme)\n\nAllows cookies with every Node.js HTTP clients (e.g. Node.js global fetch, undici, axios, node-fetch).\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n  - [Supported libraries](#supported-libraries)\n  - [Using with another Agent library](#using-with-another-agent-library)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Install\n\n```bash\nnpm install http-cookie-agent tough-cookie\n```\n\n## Usage\n\nSee also [examples](./examples) for more details.\n\n### Supported libraries\n\n| Library              | Supported?        |\n| -------------------- | ----------------- |\n| Node.js global fetch | ✅                |\n| `undici`             | ✅                |\n| `node:http`          | ✅                |\n| `node:https`         | ✅                |\n| `axios`              | ✅                |\n| `node-fetch`         | ✅                |\n| `got`                | ✅ <sup>\\*1</sup> |\n| `superagent`         | ✅ <sup>\\*1</sup> |\n| `request`            | ✅ <sup>\\*1</sup> |\n| `needle`             | ✅                |\n| `phin`               | ✅                |\n| `@hapi/wrech`        | ✅                |\n| `urllib`             | ✅                |\n| Bun global fetch     | ❌ <sup>\\*2</sup> |\n| Deno global fetch    | ❌ <sup>\\*2</sup> |\n\n\\*1: This library supports cookies by default. You may not need `http-cookie-agent`.\n\n\\*2: There have proprietary fetch implementation and is [not currently supported](https://github.com/3846masa/http-cookie-agent/issues/692).\n\n#### Node.js global fetch\n\nWhen you want to use Node.js global fetch, you should install `undici` additionally.\n\n| Node.js version | undici version         |\n| --------------- | ---------------------- |\n| v23             | `npm install undici@6` |\n| v22             | `npm install undici@6` |\n| v20             | `npm install undici@6` |\n\n```js\nimport { CookieJar } from 'tough-cookie';\nimport { CookieAgent } from 'http-cookie-agent/undici/v6';\n\nconst jar = new CookieJar();\nconst agent = new CookieAgent({ cookies: { jar } });\n\nawait fetch('https://example.com', { dispatcher: agent });\n```\n\n#### `undici`\n\n```js\nimport { fetch } from 'undici';\nimport { CookieJar } from 'tough-cookie';\nimport { CookieAgent } from 'http-cookie-agent/undici';\n\nconst jar = new CookieJar();\nconst agent = new CookieAgent({ cookies: { jar } });\n\nawait fetch('https://example.com', { dispatcher: agent });\n```\n\nAlternatively, `http-cookie-agent` can be used as [interceptors](https://github.com/nodejs/undici/blob/v7.0.0/docs/docs/api/Dispatcher.md#dispatchercomposeinterceptors-interceptor).\nIn this case, the `cookie()` must be placed at the beginning of the interceptors.\n\n```js\nimport { fetch, interceptors } from 'undici';\nimport { CookieJar } from 'tough-cookie';\nimport { cookie } from 'http-cookie-agent/undici';\n\nconst jar = new CookieJar();\nconst agent = new Agent()\n  .compose(cookie({ jar }))\n  .compose(interceptors.retry())\n  .compose(interceptors.redirect({ maxRedirections: 3 }));\n\nawait fetch('https://example.com', { dispatcher: agent });\n```\n\n#### `node:http` / `node:https`\n\n```js\nimport https from 'node:https';\n\nimport { CookieJar } from 'tough-cookie';\nimport { HttpsCookieAgent } from 'http-cookie-agent/http';\n\nconst jar = new CookieJar();\nconst agent = new HttpsCookieAgent({ cookies: { jar } });\n\nhttps.get('https://example.com', { agent }, (res) => {\n  // ...\n});\n```\n\n#### `axios`\n\n```js\nimport axios from 'axios';\nimport { CookieJar } from 'tough-cookie';\nimport { HttpCookieAgent, HttpsCookieAgent } from 'http-cookie-agent/http';\n\nconst jar = new CookieJar();\n\nconst client = axios.create({\n  httpAgent: new HttpCookieAgent({ cookies: { jar } }),\n  httpsAgent: new HttpsCookieAgent({ cookies: { jar } }),\n});\n\nawait client.get('https://example.com');\n```\n\n#### `node-fetch`\n\n```js\nimport fetch from 'node-fetch';\nimport { CookieJar } from 'tough-cookie';\nimport { HttpCookieAgent, HttpsCookieAgent } from 'http-cookie-agent/http';\n\nconst jar = new CookieJar();\n\nconst httpAgent = new HttpCookieAgent({ cookies: { jar } });\nconst httpsAgent = new HttpsCookieAgent({ cookies: { jar } });\n\nawait fetch('https://example.com', {\n  agent: ({ protocol }) => {\n    return protocol === 'https:' ? httpsAgent : httpAgent;\n  },\n});\n```\n\n#### `got`\n\n:warning: `got` supports cookies by default. You may not need `http-cookie-agent`.\n\nSee https://github.com/sindresorhus/got/tree/v11.8.2#cookies.\n\n```js\nimport got from 'got';\nimport { CookieJar } from 'tough-cookie';\nimport { HttpCookieAgent, HttpsCookieAgent } from 'http-cookie-agent/http';\n\nconst jar = new CookieJar();\n\nconst client = got.extend({\n  agent: {\n    http: new HttpCookieAgent({ cookies: { jar } }),\n    https: new HttpsCookieAgent({ cookies: { jar } }),\n  },\n});\n\nawait client('https://example.com');\n```\n\n#### `superagent`\n\n:warning: `superagent` supports cookies by default. You may not need `http-cookie-agent`.\n\nSee https://github.com/visionmedia/superagent/blob/v6.1.0/docs/index.md#saving-cookies.\n\n```js\nimport superagent from 'superagent';\nimport { CookieJar } from 'tough-cookie';\nimport { MixedCookieAgent } from 'http-cookie-agent/http';\n\nconst jar = new CookieJar();\nconst mixedAgent = new MixedCookieAgent({ cookies: { jar } });\n\nconst client = superagent.agent().use((req) => req.agent(mixedAgent));\n\nawait client.get('https://example.com');\n```\n\n#### `request`\n\n:warning: `request` supports cookies by default. You may not need `http-cookie-agent`.\n\nSee https://github.com/request/request/tree/v2.88.1#examples.\n\n```js\nimport request from 'request';\nimport { CookieJar } from 'tough-cookie';\nimport { MixedCookieAgent } from 'http-cookie-agent/http';\n\nconst jar = new CookieJar();\n\nconst client = request.defaults({\n  agent: new MixedCookieAgent({ cookies: { jar } }),\n});\n\nclient.get('https://example.com', (_err, _res) => {\n  // ...\n});\n```\n\n#### `needle`\n\n```js\nimport needle from 'needle';\nimport { CookieJar } from 'tough-cookie';\nimport { MixedCookieAgent } from 'http-cookie-agent/http';\n\nconst jar = new CookieJar();\n\nawait needle('get', 'https://example.com', {\n  agent: new MixedCookieAgent({ cookies: { jar } }),\n});\n```\n\n#### `phin`\n\n```js\nimport phin from 'phin';\nimport { CookieJar } from 'tough-cookie';\nimport { MixedCookieAgent } from 'http-cookie-agent/http';\n\nconst jar = new CookieJar();\n\nawait phin({\n  url: 'https://example.com',\n  core: {\n    agent: new MixedCookieAgent({ cookies: { jar } }),\n  },\n});\n```\n\n#### `@hapi/wreck`\n\n```js\nimport Wreck from '@hapi/wreck';\nimport { CookieJar } from 'tough-cookie';\nimport { HttpCookieAgent, HttpsCookieAgent } from 'http-cookie-agent/http';\n\nconst jar = new CookieJar();\n\nconst client = Wreck.defaults({\n  agents: {\n    http: new HttpCookieAgent({ cookies: { jar } }),\n    https: new HttpsCookieAgent({ cookies: { jar } }),\n    httpsAllowUnauthorized: new HttpsCookieAgent({ cookies: { jar } }),\n  },\n});\n\nawait client.get('https://example.com');\n```\n\n#### `urllib`\n\n```js\nimport { request, setGlobalDispatcher } from 'urllib';\nimport { CookieJar } from 'tough-cookie';\nimport { CookieAgent } from 'http-cookie-agent/undici';\n\nconst jar = new CookieJar();\nconst agent = new CookieAgent({ cookies: { jar } });\nsetGlobalDispatcher(agent);\n\nawait request('https://example.com');\n```\n\n### Using with another Agent library\n\nIf you want to use another Agent library, wrap the agent in `createCookieAgent`.\n\n```js\nimport https from 'node:https';\n\nimport { HttpsAgent as KeepAliveAgent } from 'agentkeepalive';\nimport { CookieJar } from 'tough-cookie';\nimport { createCookieAgent } from 'http-cookie-agent/http';\n\nconst Agent = createCookieAgent(KeepAliveAgent);\n\nconst jar = new CookieJar();\nconst agent = new Agent({ cookies: { jar } });\n\nhttps.get('https://example.com', { agent }, (res) => {\n  // ...\n});\n```\n\n#### `undici`\n\nIf you want to use another undici Agent library, use `cookie` with the compose method.\n\n```js\nimport { fetch, ProxyAgent } from 'undici';\nimport { CookieJar } from 'tough-cookie';\nimport { cookie } from 'http-cookie-agent/undici';\n\nconst jar = new CookieJar();\nconst agent = new ProxyAgent({\n  /* ... */\n}).compose(cookie({ jar }));\n\nawait fetch('https://example.com', { dispatcher: agent });\n```\n\n## Contributing\n\nPRs accepted.\n\n## License\n\n[MIT (c) 3846masa](../LICENSE)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright © 2021 3846masa\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the “Software”), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/http-cookie-agent/-/http-cookie-agent-7.0.1.tgz#1e1e1569d2f833f905ab368d222ba0bdba51376b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/http-cookie-agent/-/http-cookie-agent-7.0.1.tgz",
    "hash": "1e1e1569d2f833f905ab368d222ba0bdba51376b",
    "integrity": "sha512-lZHFZUdPTw64PdksQac5xbUd4NWjUbyDYnvR//2sbLpcC4UqEUW0x/6O+rDntVzJzJ07QvhtL5XZSC+c5EK+IQ==",
    "registry": "npm",
    "packageName": "http-cookie-agent",
    "cacheIntegrity": "sha512-lZHFZUdPTw64PdksQac5xbUd4NWjUbyDYnvR//2sbLpcC4UqEUW0x/6O+rDntVzJzJ07QvhtL5XZSC+c5EK+IQ== sha1-Hh4VadL4M/kFqzaNIiugvbpRN2s="
  },
  "registry": "npm",
  "hash": "1e1e1569d2f833f905ab368d222ba0bdba51376b"
}