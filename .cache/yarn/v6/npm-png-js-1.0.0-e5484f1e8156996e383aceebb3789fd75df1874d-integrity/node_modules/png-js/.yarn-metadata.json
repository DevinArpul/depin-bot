{
  "manifest": {
    "name": "png-js",
    "description": "A PNG decoder in JavaScript",
    "version": "1.0.0",
    "author": {
      "name": "Devon Govett",
      "email": "devongovett@gmail.com",
      "url": "http://badassjs.com/"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/devongovett/png.js.git"
    },
    "bugs": {
      "url": "http://github.com/devongovett/png.js/issues"
    },
    "devDependencies": {
      "jest": "^24.1.0",
      "prettier": "^1.16.4"
    },
    "scripts": {
      "test": "jest",
      "prettier": "prettier test/**/*.js png-node.js png.js --write"
    },
    "main": "png-node.js",
    "engine": [
      "node >= v0.6.0"
    ],
    "jest": {
      "setupFiles": [
        "<rootDir>/test/patch-canvas.js",
        "<rootDir>/zlib.js",
        "<rootDir>/png.js"
      ]
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-png-js-1.0.0-e5484f1e8156996e383aceebb3789fd75df1874d-integrity/node_modules/png-js/package.json",
    "readmeFilename": "README.md",
    "readme": "png.js\n======\nA PNG decoder in JS for the canvas element or Node.js.\n\n## Browser Usage\nSimply include png.js and zlib.js on your HTML page, create a canvas element, and call PNG.load to load an image.\n\n    <canvas></canvas>\n    <script src=\"zlib.js\"></script>\n    <script src=\"png.js\"></script>\n    <script>\n        var canvas = document.getElementsByTagName('canvas')[0];\n        PNG.load('some.png', canvas);\n    </script>\n    \nThe source code for the browser version resides in `png.js` and also supports loading and displaying animated PNGs.\n    \n## Node.js Usage\nInstall the module using npm\n\n    sudo npm install png-js\n    \nRequire the module and decode a PNG\n\n    var PNG = require('png-js');\n    PNG.decode('some.png', function(pixels) {\n        // pixels is a 1d array (in rgba order) of decoded pixel data\n    });\n    \nYou can also call `PNG.load` if you want to load the PNG (but not decode the pixels) synchronously.  If you already\nhave the PNG data in a buffer, simply use `new PNG(buffer)`.  In both of these cases, you need to call `png.decode`\nyourself which passes your callback the decoded pixels as a buffer.  If you already have a buffer you want the pixels\ncopied to, call `copyToImageData` with your buffer and the decoded pixels as returned from `decodePixels`.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2017 Devon Govett\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "license": "MIT"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/png-js/-/png-js-1.0.0.tgz#e5484f1e8156996e383aceebb3789fd75df1874d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/png-js/-/png-js-1.0.0.tgz",
    "hash": "e5484f1e8156996e383aceebb3789fd75df1874d",
    "integrity": "sha512-k+YsbhpA9e+EFfKjTCH3VW6aoKlyNYI6NYdTfDL4CIvFnvsuO84ttonmZE7rc+v23SLTH8XX+5w/Ak9v0xGY4g==",
    "registry": "npm",
    "packageName": "png-js",
    "cacheIntegrity": "sha512-k+YsbhpA9e+EFfKjTCH3VW6aoKlyNYI6NYdTfDL4CIvFnvsuO84ttonmZE7rc+v23SLTH8XX+5w/Ak9v0xGY4g== sha1-5UhPHoFWmW44Os7rs3if113xh00="
  },
  "registry": "npm",
  "hash": "e5484f1e8156996e383aceebb3789fd75df1874d"
}