{
  "manifest": {
    "name": "pdfkit",
    "description": "A PDF generation library for Node.js",
    "keywords": [
      "pdf",
      "pdf writer",
      "pdf generator",
      "graphics",
      "document",
      "vector"
    ],
    "version": "0.13.0",
    "homepage": "http://pdfkit.org/",
    "author": {
      "name": "Devon Govett",
      "email": "devongovett@gmail.com",
      "url": "http://badassjs.com/"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/foliojs/pdfkit.git"
    },
    "bugs": {
      "url": "https://github.com/foliojs/pdfkit/issues"
    },
    "devDependencies": {
      "@babel/core": "^7.11.6",
      "@babel/plugin-external-helpers": "^7.10.4",
      "@babel/preset-env": "^7.11.5",
      "babel-jest": "^26.3.0",
      "blob-stream": "^0.1.2",
      "brace": "^0.11.1",
      "brfs": "~2.0.2",
      "browserify": "^16.5.0",
      "canvas": "^2.6.1",
      "codemirror": "~5.49.2",
      "eslint": "^7.8.1",
      "gh-pages": "^3.1.0",
      "iconv-lite": "^0.5.0",
      "jest": "^26.4.2",
      "jest-screenshot": "^0.3.1",
      "markdown": "~0.5.0",
      "pdfjs-dist": "^2.4.456",
      "prettier": "1.19.1",
      "pug": "^2.0.4",
      "rollup": "^1.27.0",
      "rollup-plugin-babel": "^4.3.3",
      "rollup-plugin-cpy": "^2.0.1"
    },
    "dependencies": {
      "crypto-js": "^4.0.0",
      "fontkit": "^1.8.1",
      "linebreak": "^1.0.2",
      "png-js": "^1.0.0"
    },
    "scripts": {
      "prepublishOnly": "npm run build",
      "build": "rollup -c && browserify --standalone PDFDocument --ignore crypto --ignore iconv-lite js/pdfkit.js > js/pdfkit.standalone.js",
      "browserify-example": "browserify examples/browserify/browser.js > examples/browserify/bundle.js",
      "pdf-guide": "node docs/generate.js",
      "website": "node docs/generate_website.js",
      "publish-website": "node docs/publish_website.js",
      "docs": "npm run pdf-guide && npm run website && npm run browserify-example",
      "lint": "eslint {lib,tests}/**/*.js",
      "prettier": "prettier {lib,tests,examples,docs}/**/*.js",
      "test": "jest -i",
      "test:visual": "jest visual/ -i",
      "test:unit": "jest unit/"
    },
    "main": "js/pdfkit.js",
    "module": "js/pdfkit.es5.js",
    "esnext": "js/pdfkit.esnext.js",
    "browserify": {
      "transform": [
        "brfs"
      ]
    },
    "engine": [
      "node >= v6.0.0"
    ],
    "jest": {
      "testPathIgnorePatterns": [
        "/node_modules/",
        "<rootDir>/examples/"
      ],
      "testURL": "http://localhost/",
      "setupFilesAfterEnv": [
        "<rootDir>/tests/unit/setupTests.js"
      ],
      "reporters": [
        "default",
        "jest-screenshot/reporter"
      ]
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-pdfkit-0.13.0-da4c2becd63a129e3aae448fdaed4ee7be790f8f-integrity/node_modules/pdfkit/package.json",
    "readmeFilename": "README.md",
    "readme": "# PDFKit\n\nA JavaScript PDF generation library for Node and the browser.\n\n## Description\n\nPDFKit is a PDF document generation library for Node and the browser that makes creating complex, multi-page, printable\ndocuments easy. The API embraces chainability, and includes both low level functions as well as abstractions for higher\nlevel functionality. The PDFKit API is designed to be simple, so generating complex documents is often as simple as\na few function calls.\n\nCheck out some of the [documentation and examples](http://pdfkit.org/docs/getting_started.html) to see for yourself!\nYou can also read the guide as a [self-generated PDF](http://pdfkit.org/docs/guide.pdf) with example output displayed inline.\nIf you'd like to see how it was generated, check out the README in the [docs](https://github.com/foliojs/pdfkit/tree/master/docs)\nfolder.\n\nYou can also try out an interactive in-browser demo of PDFKit [here](http://pdfkit.org/demo/browser.html).\n\n## Installation\n\nInstallation uses the [npm](http://npmjs.org/) package manager. Just type the following command after installing npm.\n\n    npm install pdfkit\n\n## Features\n\n- Vector graphics\n  - HTML5 canvas-like API\n  - Path operations\n  - SVG path parser for easy path creation\n  - Transformations\n  - Linear and radial gradients\n- Text\n  - Line wrapping\n  - Text alignments\n  - Bulleted lists\n- Font embedding\n  - Supports TrueType (.ttf), OpenType (.otf), WOFF, WOFF2, TrueType Collections (.ttc), and Datafork TrueType (.dfont) fonts\n  - Font subsetting\n  - See [fontkit](http://github.com/foliojs/fontkit) for more details on advanced glyph layout support.\n- Image embedding\n  - Supports JPEG and PNG files (including indexed PNGs, and PNGs with transparency)\n- Annotations\n  - Links\n  - Notes\n  - Highlights\n  - Underlines\n  - etc.\n- AcroForms\n- Outlines\n- PDF security\n  - Encryption\n  - Access privileges (printing, copying, modifying, annotating, form filling, content accessibility, document assembly)\n- Accessibility support (marked content, logical structure, Tagged PDF, PDF/UA)\n\n## Coming soon!\n\n- Patterns fills\n- Higher level APIs for creating tables and laying out content\n- More performance optimizations\n- Even more awesomeness, perhaps written by you! Please fork this repository and send me pull requests.\n\n## Example\n\n```javascript\nconst PDFDocument = require('pdfkit');\nconst fs = require('fs');\n\n// Create a document\nconst doc = new PDFDocument();\n\n// Pipe its output somewhere, like to a file or HTTP response\n// See below for browser usage\ndoc.pipe(fs.createWriteStream('output.pdf'));\n\n// Embed a font, set the font size, and render some text\ndoc\n  .font('fonts/PalatinoBold.ttf')\n  .fontSize(25)\n  .text('Some text with an embedded font!', 100, 100);\n\n// Add an image, constrain it to a given size, and center it vertically and horizontally\ndoc.image('path/to/image.png', {\n  fit: [250, 300],\n  align: 'center',\n  valign: 'center'\n});\n\n// Add another page\ndoc\n  .addPage()\n  .fontSize(25)\n  .text('Here is some vector graphics...', 100, 100);\n\n// Draw a triangle\ndoc\n  .save()\n  .moveTo(100, 150)\n  .lineTo(100, 250)\n  .lineTo(200, 250)\n  .fill('#FF3300');\n\n// Apply some transforms and render an SVG path with the 'even-odd' fill rule\ndoc\n  .scale(0.6)\n  .translate(470, -380)\n  .path('M 250,75 L 323,301 131,161 369,161 177,301 z')\n  .fill('red', 'even-odd')\n  .restore();\n\n// Add some text with annotations\ndoc\n  .addPage()\n  .fillColor('blue')\n  .text('Here is a link!', 100, 100)\n  .underline(100, 100, 160, 27, { color: '#0000FF' })\n  .link(100, 100, 160, 27, 'http://google.com/');\n\n// Finalize PDF file\ndoc.end();\n```\n\n[The PDF output from this example](http://pdfkit.org/demo/out.pdf) (with a few additions) shows the power of PDFKit â€” producing\ncomplex documents with a very small amount of code. For more, see the `demo` folder and the\n[PDFKit programming guide](http://pdfkit.org/docs/getting_started.html).\n\n## Browser Usage\n\nThere are three ways to use PDFKit in the browser:\n\n- Use [Browserify](http://browserify.org/). See demo [source code](demo/browser.js) and [build script](https://github.com/foliojs/pdfkit/blob/master/package.json#L56)\n- Use [webpack](https://webpack.js.org/). See [complete example](https://github.com/blikblum/pdfkit-webpack-example).\n- Use prebuilt version. Distributed as `pdfkit.standalone.js` file in the [releases](https://github.com/foliojs/pdfkit/releases) or in the package `js` folder.\n\nIn addition to PDFKit, you'll need somewhere to stream the output to. HTML5 has a\n[Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) object which can be used to store binary data, and\nget URLs to this data in order to display PDF output inside an iframe, or upload to a server, etc. In order to\nget a Blob from the output of PDFKit, you can use the [blob-stream](https://github.com/devongovett/blob-stream)\nmodule.\n\nThe following example uses Browserify or webpack to load `PDFKit` and `blob-stream`. See [here](https://codepen.io/blikblum/pen/gJNWMg?editors=1010) and [here](https://codepen.io/blikblum/pen/YboVNq?editors=1010) for examples\nof prebuilt version usage.\n\n```javascript\n// require dependencies\nconst PDFDocument = require('pdfkit');\nconst blobStream = require('blob-stream');\n\n// create a document the same way as above\nconst doc = new PDFDocument();\n\n// pipe the document to a blob\nconst stream = doc.pipe(blobStream());\n\n// add your content to the document here, as usual\n\n// get a blob when you are done\ndoc.end();\nstream.on('finish', function() {\n  // get a blob you can do whatever you like with\n  const blob = stream.toBlob('application/pdf');\n\n  // or get a blob URL for display in the browser\n  const url = stream.toBlobURL('application/pdf');\n  iframe.src = url;\n});\n```\n\nYou can see an interactive in-browser demo of PDFKit [here](http://pdfkit.org/demo/browser.html).\n\nNote that in order to Browserify a project using PDFKit, you need to install the `brfs` module with npm,\nwhich is used to load built-in font data into the package. It is listed as a `devDependency` in\nPDFKit's `package.json`, so it isn't installed by default for Node users.\nIf you forget to install it, Browserify will print an error message.\n\n## Documentation\n\nFor complete API documentation and more examples, see the [PDFKit website](http://pdfkit.org/).\n\n## License\n\nPDFKit is available under the MIT license.\n",
    "licenseText": "MIT LICENSE\nCopyright (c) 2014 Devon Govett\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/pdfkit/-/pdfkit-0.13.0.tgz#da4c2becd63a129e3aae448fdaed4ee7be790f8f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/pdfkit/-/pdfkit-0.13.0.tgz",
    "hash": "da4c2becd63a129e3aae448fdaed4ee7be790f8f",
    "integrity": "sha512-AW79eHU5eLd2vgRDS9z3bSoi0FA+gYm+100LLosrQQMLUzOBGVOhG7ABcMFpJu7Bpg+MT74XYHi4k9EuU/9EZw==",
    "registry": "npm",
    "packageName": "pdfkit",
    "cacheIntegrity": "sha512-AW79eHU5eLd2vgRDS9z3bSoi0FA+gYm+100LLosrQQMLUzOBGVOhG7ABcMFpJu7Bpg+MT74XYHi4k9EuU/9EZw== sha1-2kwr7NY6Ep46rkSP2u1O5755D48="
  },
  "registry": "npm",
  "hash": "da4c2becd63a129e3aae448fdaed4ee7be790f8f"
}