{
  "manifest": {
    "name": "dfa",
    "version": "1.2.0",
    "description": "A state machine compiler",
    "main": "index.js",
    "devDependencies": {
      "@babel/core": "^7.0.0",
      "@babel/preset-env": "^7.0.0",
      "@babel/register": "^7.0.0",
      "mocha": "^3.1.0",
      "pegjs": "^0.10.0",
      "rollup": "^1.5.0",
      "rollup-plugin-babel": "^4.0.1",
      "rollup-plugin-commonjs": "^9.2.1",
      "rollup-plugin-local-resolve": "^1.0.7"
    },
    "scripts": {
      "test": "mocha --require @babel/register",
      "prepublish": "make"
    },
    "repository": {
      "type": "git",
      "url": "git+ssh://git@github.com/devongovett/dfa.git"
    },
    "keywords": [
      "state",
      "machine",
      "compiler"
    ],
    "author": {
      "name": "Devon Govett",
      "email": "devongovett@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/devongovett/dfa/issues"
    },
    "homepage": "https://github.com/devongovett/dfa#readme",
    "files": [
      "index.js",
      "index.js.map",
      "compile.js",
      "compile.js.map"
    ],
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-dfa-1.2.0-96ac3204e2d29c49ea5b57af8d92c2ae12790657-integrity/node_modules/dfa/package.json",
    "readmeFilename": "README.md",
    "readme": "# dfa\n\nCompiles a regular expression like syntax to fast deterministic finite automata.\nUseful for pattern matching against non-string sequences.\n\n## Example\n\nThis example matches [Hangul](https://en.wikipedia.org/wiki/Hangul) syllables. The symbols defined in the machine are Unicode character categories which could be mapped from code points.\n\nMachine definition:\n\n```coffeescript\n# define symbols\nX   = 0; # Other character\nL   = 1; # Leading consonant\nV   = 2; # Medial vowel\nT   = 3; # Trailing consonant\nLV  = 4; # Composed <LV> syllable\nLVT = 5; # Composed <LVT> syllable\nM   = 6; # Tone mark\n\n# define variables\ndecomposed = L V T?;\npartial = LV T?;\ncomposed = LVT;\n\n# define main state machine pattern\nmain = (decomposed | partial | composed) M?;\n```\n\nVisualized, the machine looks like this (double circles are accepting states):\n\n![dfa](https://cloud.githubusercontent.com/assets/19409/19143719/8fbc6a12-8b5a-11e6-868d-99621644d094.png)\n\nCompiling and using the machine:\n\n```javascript\nimport compile from 'dfa/compile';\nimport fs from 'fs';\n\nlet stateMachine = compile(fs.readFileSync('hangul.machine', 'utf8'));\n\n// find matches\nfor (let [startIndex, endIndex] of stateMachine.match([0, 1, 2, 3, 0, 4, 6]) {\n  console.log('match:', startIndex, endIndex);\n}\n```\n\nOutput:\n```\nmatch: 1 3\nmatch: 5 6\n```\n\n## Syntax\n\nA state machine file contains a list of assignment statements. Comments are also allowed\nand are started with the `#` character. Each statement is an assignment of a variable name\nto a value or expression. Assigning a variable to a number produces a symbol, which is\nadded to the state machine's alphabet. Assigning a variable to an expression allows\nfor substitutions into later expressions. The special `main` variable should always be\nassigned to at the end of the file, and is the final expression that will be compiled.\n\nA subset of common regular expression syntax is supported. A list of operators and their\nprecedence is below. Operators with the same precedence are evaluated left to right.\n\n| Precedence | Syntax     | Type          | Meaning                                    |\n| ---------- | ---------- | --------------| ------------------------------------------ |\n| 1          | `a \\| b`   | Alternation   | Matches either `a` or `b`                  |\n| 2          | `a b`      | Concatenation | Matches `a` followed by `b`                |\n| 3          | `a*`       | Repetition    | Matches zero or more occurrences of `a`    |\n| 3          | `a+`       | Repetition    | Matches one ore more occurrences of `a`    |\n| 3          | `a?`       | Optional      | Matches zero or one occurrence of `a`      |\n| 3          | `a{n}`     | Repetition    | Matches exactly n occurrences of `a`       |\n| 3          | `a{n,}`    | Repetition    | Matches n or more occurrences of `a`       |\n| 3          | `a{,n}`    | Repetition    | Matches up to n occurrences of `a`         |\n| 3          | `a{n,m}`   | Repetition    | Matches n to m occurrences of `a`          |\n| 4          | `t:<expr>` | Tag           | Tags the following expression with tag `t` |\n| 5          | `(<expr>)` | Grouping      | Groups an expression                       |\n\n## License\n\nMIT\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/dfa/-/dfa-1.2.0.tgz#96ac3204e2d29c49ea5b57af8d92c2ae12790657",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/dfa/-/dfa-1.2.0.tgz",
    "hash": "96ac3204e2d29c49ea5b57af8d92c2ae12790657",
    "integrity": "sha512-ED3jP8saaweFTjeGX8HQPjeC1YYyZs98jGNZx6IiBvxW7JG5v492kamAQB3m2wop07CvU/RQmzcKr6bgcC5D/Q==",
    "registry": "npm",
    "packageName": "dfa",
    "cacheIntegrity": "sha512-ED3jP8saaweFTjeGX8HQPjeC1YYyZs98jGNZx6IiBvxW7JG5v492kamAQB3m2wop07CvU/RQmzcKr6bgcC5D/Q== sha1-lqwyBOLSnEnqW1evjZLCrhJ5Blc="
  },
  "registry": "npm",
  "hash": "96ac3204e2d29c49ea5b57af8d92c2ae12790657"
}